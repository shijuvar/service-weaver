// Code generated by "weaver generate". DO NOT EDIT.
//go:build !ignoreWeaverGen

package model

import (
	"fmt"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"time"
)

// weaver.InstanceOf checks.

// weaver.Router checks.

// Local stub implementations.

// Client stub implementations.

// Note that "weaver generate" will always generate the error message below.
// Everything is okay. The error message is only relevant if you see it when
// you run "go build" or "go run".
var _ codegen.LatestVersion = codegen.Version[[0][20]struct{}](`

ERROR: You generated this file with 'weaver generate' v0.22.0 (codegen
version v0.20.0). The generated code is incompatible with the version of the
github.com/ServiceWeaver/weaver module that you're using. The weaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/ServiceWeaver/weaver

We recommend updating the weaver module and the 'weaver generate' command by
running the following.

    go get github.com/ServiceWeaver/weaver@latest
    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

Then, re-run 'weaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/ServiceWeaver/weaver/issues.

`)

// Server stub implementations.

// Reflect stub implementations.

// AutoMarshal implementations.

var _ codegen.AutoMarshal = (*Notification)(nil)

type __is_Notification[T ~struct {
	weaver.AutoMarshal
	OrderID    string
	CustomerID string
	Event      string
	Modes      []string
}] struct{}

var _ __is_Notification[Notification]

func (x *Notification) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("Notification.WeaverMarshal: nil receiver"))
	}
	enc.String(x.OrderID)
	enc.String(x.CustomerID)
	enc.String(x.Event)
	serviceweaver_enc_slice_string_4af10117(enc, x.Modes)
}

func (x *Notification) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("Notification.WeaverUnmarshal: nil receiver"))
	}
	x.OrderID = dec.String()
	x.CustomerID = dec.String()
	x.Event = dec.String()
	x.Modes = serviceweaver_dec_slice_string_4af10117(dec)
}

func serviceweaver_enc_slice_string_4af10117(enc *codegen.Encoder, arg []string) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		enc.String(arg[i])
	}
}

func serviceweaver_dec_slice_string_4af10117(dec *codegen.Decoder) []string {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]string, n)
	for i := 0; i < n; i++ {
		res[i] = dec.String()
	}
	return res
}

var _ codegen.AutoMarshal = (*Order)(nil)

type __is_Order[T ~struct {
	weaver.AutoMarshal
	ID           string      "json:\"order_id,omitempty\""
	CustomerID   string      "json:\"customer_id,omitempty\""
	Status       string      "json:\"status,omitempty\""
	CreatedOn    time.Time   "json:\"created_on,omitempty\""
	RestaurantId string      "json:\"restaurant_id,omitempty\""
	Amount       float64     "json:\"amount,omitempty\""
	OrderItems   []OrderItem "json:\"order_items,omitempty\""
}] struct{}

var _ __is_Order[Order]

func (x *Order) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("Order.WeaverMarshal: nil receiver"))
	}
	enc.String(x.ID)
	enc.String(x.CustomerID)
	enc.String(x.Status)
	enc.EncodeBinaryMarshaler(&x.CreatedOn)
	enc.String(x.RestaurantId)
	enc.Float64(x.Amount)
	serviceweaver_enc_slice_OrderItem_63a22cdf(enc, x.OrderItems)
}

func (x *Order) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("Order.WeaverUnmarshal: nil receiver"))
	}
	x.ID = dec.String()
	x.CustomerID = dec.String()
	x.Status = dec.String()
	dec.DecodeBinaryUnmarshaler(&x.CreatedOn)
	x.RestaurantId = dec.String()
	x.Amount = dec.Float64()
	x.OrderItems = serviceweaver_dec_slice_OrderItem_63a22cdf(dec)
}

func serviceweaver_enc_slice_OrderItem_63a22cdf(enc *codegen.Encoder, arg []OrderItem) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		(arg[i]).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_slice_OrderItem_63a22cdf(dec *codegen.Decoder) []OrderItem {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]OrderItem, n)
	for i := 0; i < n; i++ {
		(&res[i]).WeaverUnmarshal(dec)
	}
	return res
}

var _ codegen.AutoMarshal = (*OrderItem)(nil)

type __is_OrderItem[T ~struct {
	weaver.AutoMarshal
	ProductCode string  "json:\"code,omitempty\""
	Name        string  "json:\"name,omitempty\""
	UnitPrice   float64 "json:\"unit_price,omitempty\""
	Quantity    int     "json:\"quantity,omitempty\""
}] struct{}

var _ __is_OrderItem[OrderItem]

func (x *OrderItem) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("OrderItem.WeaverMarshal: nil receiver"))
	}
	enc.String(x.ProductCode)
	enc.String(x.Name)
	enc.Float64(x.UnitPrice)
	enc.Int(x.Quantity)
}

func (x *OrderItem) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("OrderItem.WeaverUnmarshal: nil receiver"))
	}
	x.ProductCode = dec.String()
	x.Name = dec.String()
	x.UnitPrice = dec.Float64()
	x.Quantity = dec.Int()
}

var _ codegen.AutoMarshal = (*OrderPayment)(nil)

type __is_OrderPayment[T ~struct {
	weaver.AutoMarshal
	OrderID    string
	CustomerID string
	Amount     float64
}] struct{}

var _ __is_OrderPayment[OrderPayment]

func (x *OrderPayment) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("OrderPayment.WeaverMarshal: nil receiver"))
	}
	enc.String(x.OrderID)
	enc.String(x.CustomerID)
	enc.Float64(x.Amount)
}

func (x *OrderPayment) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("OrderPayment.WeaverUnmarshal: nil receiver"))
	}
	x.OrderID = dec.String()
	x.CustomerID = dec.String()
	x.Amount = dec.Float64()
}
